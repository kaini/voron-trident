#####################################################################
#   Fan control
#####################################################################

# OrcaSlicer uses M106 P3 as exhaust fan
# P0 or nothing is the part cooling fan
[gcode_macro M106]
rename_existing: M99106
gcode:
    {% set fan = (params.P|int) if params.P is defined else 0 %}
    {% set speed = (params.S|float / 255) if params.S is defined else 1.0 %}
    {% if fan == 0 %}
      M99106 S{params.S if params.S is defined else 255}
    {% elif fan == 3 %}
      SET_FAN_SPEED FAN=exhaust_fan SPEED={speed}
    {% else %}
      SET_DISPLAY_TEXT MSG=Unknown fan {fan}
    {% endif %}

#####################################################################
#   Mainsail config
#####################################################################

[gcode_macro ON_CANCEL]
gcode:
    STATUS_IDLE
    BED_MESH_CLEAR
    CLEAR_PAUSE
    SET_SKEW CLEAR=1

[gcode_macro _CLIENT_VARIABLE]
variable_user_cancel_macro: "ON_CANCEL"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

#####################################################################
#   Filament Loading
#####################################################################

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  100
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  100
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state
    

#####################################################################
#   Brush
#####################################################################

[gcode_macro BRUSH]
gcode:
  {% set startx = 250 %}
  {% set starty = 304 %}
  {% set endx = 205 %}
  {% set endy = 304.5 %}
  {% set speed = printer.configfile.settings.printer.max_velocity * 60 %}
  {% set accel = printer.configfile.settings.printer.max_accel %}
  SAVE_GCODE_STATE NAME=brush
  G90
  M204 S{accel}
  G0 X{startx} Y{starty} F{speed / 2}
  {% for i in range(10) %}
    G0 X{endx if i % 2 == 0 else startx} Y{starty + (endy - starty) / 7 * (i % 7)} F{speed}
  {% endfor %}
  G0 X{startx} Y{starty} F{speed}
  M400
  RESTORE_GCODE_STATE NAME=brush

#####################################################################
#   A better print_start macro for v2/trident
#####################################################################
# https://github.com/jontek2/A-better-print_start-macro
# Heavily modified!

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set skip_heatsoak = params.SKIP_HEATSOAK|default("false")|lower %}
  {% set x_wait = 250 %}
  {% set y_wait = 304 %}

  ##  Reset mesh, pause flag, skew and fans.
  BED_MESH_CLEAR
  CLEAR_PAUSE
  SET_SKEW CLEAR=1
  M106 P0 S0
  M106 P3 S0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  SET_FAN_SPEED FAN=nevermore SPEED=1

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING
    M106 S255                                           # Turn on the PT-fan

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    {% if skip_heatsoak == 'false' %}                   # Wait 5 min for the bedtemp to stabilize
      {% for i in range(300, 0, -1) %}
        SET_DISPLAY_TEXT MSG="Soak for {i // 60} minutes {i % 60} seconds"
        G4 P1000
      {% endfor %}
    {% endif %}
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c
  BRUSH

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Leveling"                       # Display info on display
  STATUS_LEVELING                                       # Set LEDs to leveling-mode
  Z_TILT_ADJUST                                         # Level the printer via Z_TILT_ADJUST
  G28 Z                                                 # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                       # Display info on display
  STATUS_MESHING                                        # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1                         # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
  CARTOGRAPHER_TOUCH FUZZY=10 RETRIES=20

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp
  BRUSH

  SKEW_PROFILE LOAD=Califlower

  # Get ready to print by updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode

[gcode_macro PRINT_END]
gcode:
  {% set x_wait = 250 %}
  {% set y_wait = 303 %}
  SAVE_GCODE_STATE NAME=STATE_PRINT_END

  M400                           ; wait for buffer to clear
  
  G92 E0                         ; zero the extruder
  G1 E-1.0 F3600                 ; retract filament
  M400

  TURN_OFF_HEATERS
  M107                           ; turn off fan
  
  G90
  M204 S{printer.configfile.settings.printer.max_accel / 2}
  ; a little z hop if possible
  {% if printer.gcode_move.gcode_position.z + 1 <= printer.toolhead.axis_maximum.z %}                       
    G0 Z{printer.gcode_move.gcode_position.z + 1} F{printer.configfile.settings.printer.max_z_velocity * 60}
    M400
  {% endif %}
  ; park
  G0 X{x_wait} Y{y_wait} F{printer.configfile.settings.printer.max_velocity * 60 / 2}
  ; move printed stuff down
  G0 Z{printer.gcode_move.gcode_position.z + 50 if printer.gcode_move.gcode_position.z + 50 <= printer.toolhead.axis_maximum.z else printer.toolhead.axis_maximum.z} F{printer.configfile.settings.printer.max_z_velocity * 60}
  
  BED_MESH_CLEAR
  CLEAR_PAUSE
  SET_SKEW CLEAR=1
  
  # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
  # command pair is to restore the printer's coordinate system
  # and speed settings since the commands above change them.
  # However, to prevent any accidental, unintentional toolhead
  # moves when restoring the state, explicitly set MOVE=0.
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
  STATUS_IDLE

#####################################################################
#   LED macros
#####################################################################

[gcode_macro STATUS_HOMING]
gcode:
  SET_LED_EFFECT EFFECT=toolhead_homing REPLACE=1
  SET_PIN PIN=caselight VALUE=0.1

[gcode_macro STATUS_LEVELING]
gcode:
  SET_LED_EFFECT EFFECT=toolhead_homing REPLACE=1
  SET_PIN PIN=caselight VALUE=0.1

[gcode_macro STATUS_HEATING]
gcode:
  SET_LED_EFFECT EFFECT=toolhead_heating REPLACE=1
  SET_PIN PIN=caselight VALUE=0.1

[gcode_macro STATUS_MESHING]
gcode:
  SET_LED_EFFECT EFFECT=toolhead_homing REPLACE=1
  SET_PIN PIN=caselight VALUE=0.1

[gcode_macro STATUS_PRINTING]
gcode:
  SET_LED_EFFECT EFFECT=toolhead_printing REPLACE=1
  SET_PIN PIN=caselight VALUE=0.1

[gcode_macro STATUS_IDLE]
gcode:
  SET_LED_EFFECT EFFECT=toolhead_idle REPLACE=1
  SET_PIN PIN=caselight VALUE=0

#####################################################################
#   TEST_SPEED from Ellis' Printer Tuning
#####################################################################

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        M400
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        M400
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
